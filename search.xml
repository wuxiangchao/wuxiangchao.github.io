<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Attention is all your need论文阅读</title>
    <url>/2024/12/19/Attention-is-all-your-need%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe Illustrator 快速入门</title>
    <url>/2025/04/29/Adobe-Illustrator-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="This-is-an-adobe-note"><a href="#This-is-an-adobe-note" class="headerlink" title="This is an adobe note"></a>This is an adobe note</h1><p><img src="img.png" alt="Image" title="eee"></p>
<div style="text-align: center;">Image 1: This is a image about</div>]]></content>
      <tags>
        <tag>Adobe Illustrator</tag>
      </tags>
  </entry>
  <entry>
    <title>Bundle Ajustment从理论到实践</title>
    <url>/2024/12/22/Bundle-Ajustment%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="Bundle-Ajustment光束平差法概述"><a href="#Bundle-Ajustment光束平差法概述" class="headerlink" title="Bundle-Ajustment光束平差法概述"></a>Bundle-Ajustment光束平差法概述</h1><span id="more"></span>
<h2 id="BA基本理论"><a href="#BA基本理论" class="headerlink" title="BA基本理论"></a>BA基本理论</h2><p>这是光束平差法</p>
<script type="math/tex; mode=display">
y=x+1</script><p>测试代码</p>
<script type="math/tex; mode=display">
\begin{equation} 
    \frac{1}{2} = \int_{1}^{2}\Sigma a_{ij} \cdot b_{ij} 
\end{equation}\label{1.1}</script><script type="math/tex; mode=display">\begin{equation}
\begin{bmatrix}
a & b \\
c & d
\end{bmatrix}
\end{equation}</script><h2 id="C-实现光束平差法"><a href="#C-实现光束平差法" class="headerlink" title="C++实现光束平差法"></a>C++实现光束平差法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 泛型编程</title>
    <url>/2024/12/19/C-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>这是一篇关于c++泛型编程的文章</p>
<span id="more"></span>
<p>Test</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 源码趣读 - 01</title>
    <url>/2024/12/22/Linux-%E6%BA%90%E7%A0%81%E8%B6%A3%E8%AF%BB-01/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 源码趣读 03</title>
    <url>/2025/04/29/Linux-%E6%BA%90%E7%A0%81%E8%B6%A3%E8%AF%BB-03/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux 源码趣读 - 02</title>
    <url>/2024/12/22/Linux-%E6%BA%90%E7%A0%81%E8%B6%A3%E8%AF%BB-02/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 数据类型</title>
    <url>/2024/12/19/Rust-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Rust-基本数据类型概述"><a href="#Rust-基本数据类型概述" class="headerlink" title="Rust 基本数据类型概述"></a>Rust 基本数据类型概述</h1><p>Rust 每个值都有确切的数据类型, 总的来说可以分为两类: 借本类型和复合类型。基本类型意味着它们往往是一个最小化原子类型，无法结构为其它类型。</p>
<span id="more"></span>
<p>一般来说Rust包含以下基本类型:</p>
<ul>
<li>数值类型: 有符号整数(<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、无符号整数(<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>)</li>
<li>字符串: 字符串字面量和字符串切片 <code>&amp;str</code></li>
<li>布尔类型: <code>true</code> 和 <code>false</code></li>
<li>字符类型: 表示单个Unicode字符，存储为四个字节</li>
<li>单元类型: 即<code>()</code>, 其唯一的值也是()</li>
</ul>
<h1 id="类型推导与标注"><a href="#类型推导与标注" class="headerlink" title="类型推导与标注"></a>类型推导与标注</h1><p>与Python、JavaScript等动态语言不同，Rust是一门静态类型语言，也就是编译器必须再编译期知道所有变量的类型，但这不意味着你需要为每个变量指定类型，<br>因为<strong>Rust编译器可以根据变量值和上下文的使用方式来自动推导出变量的类型</strong>，但在某些情况下，它无法推导出变量类型，需要手动去给与一个类型标注。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">except</span>(<span class="string">&quot;Not a number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码编译器无法推导出想要的类型，编译器给出如下报错:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[Running] cargo run -q --release <span class="string">&quot;i:\SourceCode\Rust\data_deep\src\main.rs&quot;</span></span><br><span class="line">error[E0284]: <span class="keyword">type</span> <span class="title class_">annotations</span> needed</span><br><span class="line"> -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">2</span>:<span class="number">9</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     <span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;not a number&quot;</span>);</span><br><span class="line">  |         ^^^^^        ----- <span class="keyword">type</span> <span class="title class_">must</span> be known at this point</span><br><span class="line">  |</span><br><span class="line">  = note: cannot satisfy `&lt;_ <span class="keyword">as</span> FromStr&gt;::<span class="literal">Err</span> == _`</span><br><span class="line">help: consider giving `guess` an explicit <span class="keyword">type</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     <span class="keyword">let</span> <span class="variable">guess</span>: <span class="comment">/* Type */</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;not a number&quot;</span>);</span><br><span class="line">  |              ++++++++++++</span><br><span class="line"></span><br><span class="line">For more information about this error, <span class="keyword">try</span> `rustc --explain E0284`.</span><br><span class="line">error: could not compile `data_deep` (bin <span class="string">&quot;data_deep&quot;</span>) due to <span class="number">1</span> previous error</span><br><span class="line"></span><br><span class="line">[Done] exited with code=<span class="number">101</span> <span class="keyword">in</span> <span class="number">0.605</span> seconds</span><br></pre></td></tr></table></figure>
<p>正确的写法应该是:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">i32</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">except</span>(<span class="string">&quot;Not a number&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><blockquote>
<p>Rust使用一种相对传统的语法来创建整数<code>(1, 2, ...)</code>和浮点数<code>(1.0, 1.1, ...)</code>.</p>
</blockquote>
<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>整数是没有小数的数字，<code>i</code>是<code>integer</code>的首字母，<code>u</code>是<code>unsigned</code>的首字母</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>长度</th>
<th>有符号整形</th>
<th>无符号整形</th>
</tr>
</thead>
<tbody>
<tr>
<td>8位</td>
<td><code>i8</code></td>
<td><code>u8</code></td>
</tr>
<tr>
<td>16位</td>
<td><code>i16</code></td>
<td><code>u16</code></td>
</tr>
<tr>
<td>32位</td>
<td><code>i32</code></td>
<td><code>u32</code></td>
</tr>
<tr>
<td>64位</td>
<td><code>i64</code></td>
<td><code>u64</code></td>
</tr>
<tr>
<td>128位</td>
<td><code>i128</code></td>
<td><code>u128</code></td>
</tr>
<tr>
<td>视架构而定</td>
<td><code>isize</code></td>
<td><code>usize</code></td>
</tr>
</tbody>
</table>
</div>
<p>类型定义的形式统一为:<code>i(u)+类型位数</code>。<strong>无符号数</strong>表示只能取正整数和0，而<strong>有符号数</strong>则表示数字可以取正整数、负整数和0。</p>
<blockquote>
<p>每个有符号类型规定的数字范围是$-2^{n-1}\sim2^{n-1} -1$, 其中<code>n</code>是该定义形式的位长度。因此，<code>i8</code>可存储数字范围是$-2^7\sim2^7-1$, 即 $-128\sim127$。无符号类型可以存储的数字范围是$0\sim2^n-1$,所以<code>u8</code>能够存储的数字为$0\sim2^8-1$,即$0\sim255$。</p>
<p>此外，<code>isize</code>和<code>usize</code>类型取决于程序运行的计算机CPU类型：若CPU是<code>32</code>位的，则这两个类型是<code>32</code>位的。</p>
</blockquote>
<p>整形字面值可以用下表的形式书写:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数字字面值</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制</td>
<td><code>98_222</code></td>
</tr>
<tr>
<td>十六进制</td>
<td><code>0xff</code></td>
</tr>
<tr>
<td>八进制</td>
<td><code>0o77</code></td>
</tr>
<tr>
<td>二进制</td>
<td><code>0b1111_0000</code></td>
</tr>
<tr>
<td>字节(仅限于<code>u8</code>)</td>
<td><code>b&#39;A&#39;</code></td>
</tr>
</tbody>
</table>
</div>
<p>这么多类型，有没有一个简单的使用准则？答案是肯定的， Rust 整型默认使用 <code>i32</code>，例如 <code>let i = 1</code>，那 <code>i</code>就是 <code>i32</code> 类型，因此你可以首选它，同时该类型也往往是性能最好的。<code>isize</code> 和 <code>usize</code> 的主要应用场景是用作集合的索引。</p>
<h4 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h4><p>假设有一个 <code>u8</code> ，它可以存放从$0\sim255$的值。那么当你将其修改为范围之外的值，比如$256$，则会发生整型溢出。关于这一行为Rust有一些有趣的规则：当在<code>debug</code>模式编译时，Rust会检查整型溢出，若存在这些问题，则使程序在编译时<code>panic</code>(崩溃,Rust使用这个术语来表明程序因错误而退出)。</p>
<p>在当使用<code>--release</code>参数进行<code>release</code>模式构建时，Rust 不检测溢出。相反，当检测到整型溢出时，Rust 会按照补码循环溢出（two’s complement wrapping）的规则处理。简而言之，大于该类型最大值的数值会被补码转换成该类型能够支持的对应数字的最小值。比如在<code>u8</code>的情况下，<code>256</code>变成<code>0</code>，<code>257</code>变成<code>1</code>，依此类推。程序不会<code>panic</code>，但是该变量的值可能不是你期望的值。依赖这种默认行为的代码都应该被认为是错误的代码。</p>
<p>要显式处理可能的溢出，可以使用标准库针对原始数字类型提供的这些方法：</p>
<ul>
<li>使用<code>wrapping_*</code>方法在所有模式下都按照补码循环溢出规则处理，例如<code>wrapping_add</code></li>
<li>如果使用<code>checked_*</code>方法时发生溢出，则返回<code>None</code>值</li>
<li>使用<code>overflowing_*</code>方法返回该值和一个指示是否存在溢出的布尔值</li>
<li>使用<code>saturating_*</code>方法，可以限定计算后的结果不超过目标类型的最大值或低于最小值，例如:</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">100u8</span>.<span class="title function_ invoke__">saturating_add</span>(<span class="number">1</span>), <span class="number">101</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="type">u8</span>::MAX.<span class="title function_ invoke__">saturating_add</span>(<span class="number">127</span>), <span class="type">u8</span>::MAX);</span><br></pre></td></tr></table></figure>
<p>下面是<code>wrapping_*</code>的用法示例:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> : <span class="type">u8</span> = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = a.<span class="title function_ invoke__">wrapping_add</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);  <span class="comment">// 19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p><strong>浮点类型数字</strong>是带有小数点的数字，在Rust中浮点类型数字也有两种基本类型：<code>f32</code>和<code>f64</code>，分别为<code>32</code>位和<code>64</code>位大小。默认浮点类型是<code>f64</code>，在现代的CPU中它的速度与<code>f32</code>几乎相同，但精度更高。</p>
<p>下面是一个演示浮点数的示例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2.0</span>; <span class="comment">// f64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f32</span> = <span class="number">3.0</span>; <span class="comment">// f32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浮点数根据<code>IEEE-754</code>标准实现。<code>f32</code>类型是单精度浮点型，<code>f64</code>为双精度。</p>
<p>浮点数陷阱<br>浮点数由于底层格式的特殊性，导致了如果在使用浮点数时不够谨慎，就可能造成危险，有两个原因：</p>
<ul>
<li>浮点数往往是你想要数字的近似表达 浮点数类型是基于二进制实现的，但是我们想要计算的数字往往是基于十进制，例如<code>0.1</code>在二进制上并不存在精确的表达形式，但是在十进制上就存在。这种不匹配性导致一定的歧义性，更多的，虽然浮点数能代表真实的数值，但是由于底层格式问题，它往往受限于定长的浮点数精度，如果你想要表达完全精准的真实数字，只有使用无限精度的浮点数才行</li>
<li>浮点数在某些特性上是反直觉的 例如大家都会觉得浮点数可以进行比较，对吧？是的，它们确实可以使用<code>&gt;</code>，<code>&gt;=</code>等进行比较，但是在某些场景下，这种直觉上的比较特性反而会害了你。因为<code>f32</code>，<code>f64</code>上的比较运算实现的是<code>std::cmp::PartialEq</code>特征(类似其他语言的接口)，但是并没有实现<code>std::cmp::Eq</code>特征，但是后者在其它数值类型上都有定义，说了这么多，可能大家还是云里雾里，用一个例子来举例：</li>
</ul>
<p>Rust的<code>HashMap</code>数据结构，是一个<code>KV</code>类型的<code>Hash Map</code>实现，它对于<code>K</code>没有特定类型的限制，但是要求能用作<code>K</code>的类型必须实现了<code>std::cmp::Eq</code>特征，因此这意味着你无法使用浮点数作为<code>HashMap</code>的<code>Key</code>，来存储键值对，但是作为对比,<code>Rust</code>的整数类型、字符串类型、布尔类型都实现了该特征，因此可以作为<code>HashMap</code>的<code>Key</code>。</p>
<p>为了避免上面说的两个陷阱，你需要遵守以下准则：</p>
<ul>
<li>避免在浮点数上测试相等性</li>
<li>当结果在数学上可能存在未定义时，需要格外的小心<br>来看个小例子:</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">span</span><br></pre></td></tr></table></figure>
<p>你可能以为，这段代码没啥问题吧，实际上它会<code>panic</code>（程序崩溃，抛出异常），因为二进制精度问题，导致了<code>0.1 + 0.2</code>并不严格等于<code>0.3</code>，它们可能在小数点<code>N</code>位后存在误差。</p>
<p>那如果非要进行比较呢？可以考虑用这种方式<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code>，具体小于多少，取决于你对精度的需求。</p>
<p>讲到这里，相信大家基本已经明白了，为什么操作浮点数时要格外的小心，但是还不够，下面再来一段代码，直接震撼你的灵魂：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">abc</span>: (<span class="type">f32</span>, <span class="type">f32</span>, <span class="type">f32</span>) = (<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">xyz</span>: (<span class="type">f64</span>, <span class="type">f64</span>, <span class="type">f64</span>) = (<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;abc (f32)&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;   0.1 + 0.2: &#123;:x&#125;&quot;</span>, (abc.<span class="number">0</span> + abc.<span class="number">1</span>).<span class="title function_ invoke__">to_bits</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;         0.3: &#123;:x&#125;&quot;</span>, (abc.<span class="number">2</span>).<span class="title function_ invoke__">to_bits</span>());</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;xyz (f64)&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;   0.1 + 0.2: &#123;:x&#125;&quot;</span>, (xyz.<span class="number">0</span> + xyz.<span class="number">1</span>).<span class="title function_ invoke__">to_bits</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;         0.3: &#123;:x&#125;&quot;</span>, (xyz.<span class="number">2</span>).<span class="title function_ invoke__">to_bits</span>());</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert!</span>(abc.<span class="number">0</span> + abc.<span class="number">1</span> == abc.<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(xyz.<span class="number">0</span> + xyz.<span class="number">1</span> == xyz.<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行该程序，输出如下:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">abc</span> (<span class="type">f32</span>)</span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>: <span class="number">3e99999</span>a</span><br><span class="line"><span class="number">0.3</span>: <span class="number">3e99999</span>a</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">xyz</span> (<span class="type">f64</span>)</span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>: <span class="number">3</span>fd3333333333334</span><br><span class="line"><span class="number">0.3</span>: <span class="number">3</span>fd3333333333333</span><br><span class="line"></span><br><span class="line">thread <span class="string">&#x27;main&#x27;</span> panicked at <span class="string">&#x27;assertion failed: xyz.0 + xyz.1 == xyz.2&#x27;</span>,</span><br><span class="line">➥ch2-add-floats.rs.rs:<span class="number">14</span>:<span class="number">5</span></span><br><span class="line">note: run with `RUST_BACKTRACE=<span class="number">1</span>` environment variable to display</span><br><span class="line">➥a backtrace</span><br></pre></td></tr></table></figure>
<p>仔细看，对<code>f32</code>类型做加法时,<code>0.1 + 0.2</code>的结果是<code>3e99999a</code>，<code>0.3</code>也是<code>3e99999a</code>，因此<code>f32</code>下的<code>0.1 + 0.2 == 0.3</code>通过测试，但是到了<code>f64</code>类型时，结果就不一样了，因为<code>f64</code>精度高很多，因此在小数点非常后面发生了一点微小的变化,<code>0.1 + 0.2</code>以<code>4</code>结尾，但是<code>0.3</code>以<code>3</code>结尾，这个细微区别导致<code>f64</code>下的测试失败了，并且抛出了异常。</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>对于数学上未定义的结果，例如对负数取平方根<code>-42.1.sqrt()</code>，会产生一个特殊的结果：Rust 的浮点数类型使用<code>NaN</code>(not a number) 来处理这些情况。</p>
<p>所有跟<code>NaN</code>交互的操作，都会返回一个<code>NaN</code>，而且<code>NaN</code>不能用来比较，下面的代码会崩溃：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = (-<span class="number">42.0_f32</span>).<span class="title function_ invoke__">sqrt</span>();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(x, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出于防御性编程的考虑，可以使用<code>is_nan()</code>等方法，可以用来判断一个数值是否是<code>NaN</code>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = (-<span class="number">42.0_f32</span>).<span class="title function_ invoke__">sqrt</span>();</span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">is_nan</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;未定义的数学行为&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p>Rust 支持所有数字类型的基本数学运算：加法、减法、乘法、除法和取模运算。下面代码各使用一条<code>let</code>语句来说明相应运算的用法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span> = <span class="number">5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">difference</span> = <span class="number">95.5</span> - <span class="number">4.3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乘法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">product</span> = <span class="number">4</span> * <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">quotient</span> = <span class="number">56.7</span> / <span class="number">32.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求余</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">remainder</span> = <span class="number">43</span> % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些语句中的每个表达式都使用了数学运算符，并且计算结果为一个值，然后绑定到一个变量上。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 编译器会进行自动推导，给予twenty i32的类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">twenty</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 类型标注</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">twenty_one</span>: <span class="type">i32</span> = <span class="number">21</span>;</span><br><span class="line">    <span class="comment">// 通过类型后缀的方式进行类型标注：22是i32类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">twenty_two</span> = <span class="number">22i32</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 只有同样类型，才能运算</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">addition</span> = twenty + twenty_one + twenty_two;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; + &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, twenty, twenty_one, twenty_two, addition);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 对于较长的数字，可以用_进行分割，提升可读性</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">one_million</span>: <span class="type">i64</span> = <span class="number">1_000_000</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, one_million.<span class="title function_ invoke__">pow</span>(<span class="number">2</span>));</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 定义一个f32数组，其中42.0会自动被推导为f32类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">forty_twos</span> = [</span><br><span class="line">        <span class="number">42.0</span>,</span><br><span class="line">        <span class="number">42f32</span>,</span><br><span class="line">        <span class="number">42.0_f32</span>,</span><br><span class="line">    ];</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 打印数组中第一个值，并控制小数位为2位</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>, forty_twos[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>Rust 的位运算基本上和其他语言一样</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp; 位与</td>
<td>相同位置均为1时则为1，否则为0</td>
</tr>
<tr>
<td>位或</td>
<td>相同位置只要有1时则为1，否则为0</td>
</tr>
<tr>
<td>^ 异或</td>
<td>相同位置不相同则为1，相同则为0</td>
</tr>
<tr>
<td>! 位非</td>
<td>把位中的0和1相互取反，即0置为1，1置为0</td>
</tr>
<tr>
<td>&lt;&lt; 左移</td>
<td>所有位向左移动指定位数，右位补0</td>
</tr>
<tr>
<td>&gt;&gt; 右移</td>
<td>所有位向右移动指定位数，带符号移动（正数补0，负数补1）</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 无符号8位整数，二进制为00000010</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: <span class="type">u8</span> = <span class="number">2</span>; <span class="comment">// 也可以写 let a: u8 = 0b_0000_0010;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二进制为00000011</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">u8</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;:08b&#125;：左高右低输出二进制01，不足8位则高位补0</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a value is        &#123;:08b&#125;&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b value is        &#123;:08b&#125;&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a &amp; b) value is  &#123;:08b&#125;&quot;</span>, a &amp; b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a | b) value is  &#123;:08b&#125;&quot;</span>, a | b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a ^ b) value is  &#123;:08b&#125;&quot;</span>, a ^ b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(!b) value is     &#123;:08b&#125;&quot;</span>, !b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a &lt;&lt; b) value is &#123;:08b&#125;&quot;</span>, a &lt;&lt; b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a &gt;&gt; b) value is &#123;:08b&#125;&quot;</span>, a &gt;&gt; b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = a;</span><br><span class="line">    <span class="comment">// 注意这些计算符除了!之外都可以加上=进行赋值 (因为!=要用来判断不等于)</span></span><br><span class="line">    a &lt;&lt;= b;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(a &lt;&lt; b) value is &#123;:08b&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>Rust提供了一个非常简洁的方式，用来生成连续的数值，例如<code>1..5</code>，生成从<code>1</code>到<code>4</code>的连续数字，不包含<code>5</code>;<code>1..=5</code>，生成从<code>1</code>到<code>5</code>的连续数字，包含<code>5</code>，它的用途很简单，常常用于循环中：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终程序输出:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>序列只允许用于数字或字符类型，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Rust中可以使用<code>As</code>来完成一个类型到另一个类型的转换，其最常用于将原始类型转换为其他原始类型，但是它也可以完成诸如将指针转换为地址、地址转换为指针以及将指针转换为其他指针等功能。</p>
<h3 id="有理数和复数"><a href="#有理数和复数" class="headerlink" title="有理数和复数"></a>有理数和复数</h3><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>
<ul>
<li>有理数和复数</li>
<li>任意大小的整数和任意精度的浮点数</li>
<li>固定精度的十进制小数，常用于货币相关的场景</li>
</ul>
<p>好在社区已经开发出高质量的 Rust 数值库：<a href="https://crates.io/crates/num">num</a>。</p>
<p>按照以下步骤来引入<code>num</code>库：</p>
<ol>
<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>
<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>
<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>
<li>运行 <code>cargo run</code></li>
</ol>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> num::complex::Complex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">a</span> = Complex &#123; re: <span class="number">2.1</span>, im: -<span class="number">1.2</span> &#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">b</span> = Complex::<span class="title function_ invoke__">new</span>(<span class="number">11.1</span>, <span class="number">22.2</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">result</span> = a + b;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 所有权机制</title>
    <url>/2024/12/19/Rust-%E6%89%80%E6%9C%89%E6%9D%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>通过这篇博客深刻理解Rust的所有权机制</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="深入理解Rust的所有权机制对内存安全的影响"><a href="#深入理解Rust的所有权机制对内存安全的影响" class="headerlink" title="深入理解Rust的所有权机制对内存安全的影响"></a>深入理解Rust的所有权机制对内存安全的影响</h2><span id="more"></span>]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust-生命周期</title>
    <url>/2024/12/19/Rust-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>通过这篇博客深刻理解Rust的生命周期</p>
<span id="more"></span>]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>《The Wealth of Nations》读书笔记-01</title>
    <url>/2025/04/29/%E3%80%8AThe-Wealth-of-Nations%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>《你当像鸟飞向你的山》读书笔记</title>
    <url>/2024/12/19/%E3%80%8A%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%90%91%E4%BD%A0%E7%9A%84%E5%B1%B1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《古罗马文明的光芒》读书笔记</title>
    <url>/2024/12/19/%E3%80%8A%E5%8F%A4%E7%BD%97%E9%A9%AC%E6%96%87%E6%98%8E%E7%9A%84%E5%85%89%E8%8A%92%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《月亮与六便士》读书笔记</title>
    <url>/2024/12/19/%E3%80%8A%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>米瑟斯《Human Action》 读书笔记 01</title>
    <url>/2025/04/29/%E7%B1%B3%E7%91%9F%E6%96%AF%E3%80%8AHuman-Action%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01/</url>
    <content><![CDATA[<h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><blockquote>
<p>米瑟斯:</p>
</blockquote>
<span id="more"></span>
<h1 id="Human-action"><a href="#Human-action" class="headerlink" title="Human action"></a>Human action</h1><h2 id="human-action-is-a"><a href="#human-action-is-a" class="headerlink" title="human action is a"></a>human action is a</h2>]]></content>
  </entry>
  <entry>
    <title>米瑟斯《Human Action》 读书笔记 02</title>
    <url>/2025/04/29/%E7%B1%B3%E7%91%9F%E6%96%AF%E3%80%8AHuman-Action%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-02/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>统计学习方法-01</title>
    <url>/2025/01/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-01/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法 03</title>
    <url>/2025/04/30/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-03/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>统计学习方法-02</title>
    <url>/2025/01/03/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-02/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>英语学习的一点感悟</title>
    <url>/2024/12/19/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>读James Stewart《Calculus》 01</title>
    <url>/2025/04/30/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-01/</url>
    <content><![CDATA[<h2 id="James-Stewart-《Calculus》"><a href="#James-Stewart-《Calculus》" class="headerlink" title="James Stewart 《Calculus》"></a>James Stewart 《Calculus》</h2><h3 id="Chapter-1-Functions-and-Limits"><a href="#Chapter-1-Functions-and-Limits" class="headerlink" title="Chapter 1. Functions and Limits"></a>Chapter 1. Functions and Limits</h3><p>The fundamental objects that we deal with in calculus are functions.</p>
<span id="more"></span>
<h4 id="1-1-Four-ways-to-represent-a-function"><a href="#1-1-Four-ways-to-represent-a-function" class="headerlink" title="1.1 Four ways to represent a function"></a>1.1 Four ways to represent a function</h4><p>Functions arise whenever one quantity depends on another. Consider the following four situations.</p>
<ul>
<li>A. The area $A$ of a circle depends on the radius $r$ of the circle. The rule that connects $r$ and $A$ is given by the equation $A=\pi r^2$. With each positive number $r$ there is associated one value of $A$, and we say that $A$ is a function of $r$.</li>
<li>B. The human population of the world $P$ depends on the time $t$. The table gives estimates of the world population $P(t)$ at time $t$, for certain years. For instance,</li>
</ul>
<script type="math/tex; mode=display">
\begin{equation}
P(1950) = 2,560,000,000
\end{equation}</script><div class="table-container">
<table>
<thead>
<tr>
<th>Year</th>
<th>Population<br/>(millions)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1900</td>
<td>1650</td>
</tr>
<tr>
<td>1910</td>
<td>1750</td>
</tr>
<tr>
<td>1920</td>
<td>1860</td>
</tr>
<tr>
<td>1930</td>
<td>2070</td>
</tr>
<tr>
<td>1940</td>
<td>2300</td>
</tr>
<tr>
<td>1950</td>
<td>2560</td>
</tr>
<tr>
<td>1960</td>
<td>3040</td>
</tr>
<tr>
<td>1970</td>
<td>3710</td>
</tr>
<tr>
<td>1980</td>
<td>4450</td>
</tr>
<tr>
<td>1990</td>
<td>5280</td>
</tr>
<tr>
<td>2000</td>
<td>6080</td>
</tr>
<tr>
<td>2010</td>
<td>6870</td>
</tr>
</tbody>
</table>
</div>
<p>But for each value of the time $t$ there is a corresponding value of $P$, and we say that $P$ is a function of $t$.</p>
<ul>
<li>C. The cost $C$ of mailing an envelope depends on its weight $w$. Although there is no simple formula that connects $w$ and $C$, the post office has a rule for determining $C$ when $w$ is knowen.</li>
<li>D. The vertical acceleration $a$ of the ground as measured by a seismograph during an earthquake is a function of the elapsed time $t$. Figure 1 shows a graph generated by seismic activity during the Northridge earthquake that shook Los Angeles in 1994. For a given value of t, the graph provides a corresponding value of $a$.<br><img src="img.png" alt="Image about function" title="Image test"><div style="text-align: center;">Figure 1. Vertical ground acceleration during the Northbridge earthquake</div>

</li>
</ul>
<p>Each of these examples describes a rule whereby, given a number ($r,t,w$ or $t$), another number ($A,P,C,$ or $a$) is assigned. In each case we say that the second number is a function of the first number.</p>
<blockquote>
<p>A <strong>function</strong> $f$ is a rule that assigns to each element $x$ in a set $D$ exactly one element, called $f(x)$, in a set $E$.</p>
</blockquote>
<p>We usually consider functions for which the sets $D$ and $E$ are of real numbers. The set $D$ is called the <strong>domain</strong> of the function. The number $f(x)$ is the value of $f$ at $x$ and is read “$f$ of $x$.” The <strong>range</strong> of $f$ is the set off all possible values of $f(x)$ as $x$ varies throughout the domain. A symbol that represents an arbitrary number in the domain of a function $f$ is called an <strong>independent variable</strong>. A symbol that represents a number in the range of is called a <strong>dependent variable</strong>. In example A, for instance, $r$ is the independent variable and $A$ is the dependent variable.</p>
<p><img src="img_1.png" alt="Function flow"></p>
<div style="text-align: center;">Figure 2. Machine diagram for a function</div>

<p>It’s helpful to think of a function as a machine. If $x$ is in </p>
]]></content>
      <tags>
        <tag>Calculus</tag>
      </tags>
  </entry>
  <entry>
    <title>读James Stewart《Calculus》 02</title>
    <url>/2025/04/30/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-02/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>读James Stewart《Calculus》 03</title>
    <url>/2025/04/30/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-03/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>读James Stewart《Calculus》 04</title>
    <url>/2025/04/30/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-04/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>读James-Stewart《Calculus》-05</title>
    <url>/2025/05/07/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-05/</url>
    <content><![CDATA[<p><img src="img.png" alt="img.png"></p>
]]></content>
  </entry>
  <entry>
    <title>读James-Stewart《Calculus》-06</title>
    <url>/2025/05/12/%E8%AF%BBJames-Stewart%E3%80%8ACalculus%E3%80%8B-06/</url>
    <content><![CDATA[<p><img src="img.png" alt="Image"></p>
]]></content>
  </entry>
  <entry>
    <title>读《Matrix Analysis》 02</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8AMatrix-Analysis%E3%80%8B-02/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读《Matrix Analysis》 01</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8AMatrix-Analysis%E3%80%8B-01/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读《Matrix Analysis》 03</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8AMatrix-Analysis%E3%80%8B-03/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读《The Narrow Corridor States》</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8AThe-Narrow-Corridor-States%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读《西方人文主义传统》的一些感想</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8A%E8%A5%BF%E6%96%B9%E4%BA%BA%E6%96%87%E4%B8%BB%E4%B9%89%E4%BC%A0%E7%BB%9F%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读《德米安彷徨少年时》 身在囚笼，心却自由</title>
    <url>/2025/04/30/%E8%AF%BB%E3%80%8A%E5%BE%B7%E7%B1%B3%E5%AE%89%E5%BD%B7%E5%BE%A8%E5%B0%91%E5%B9%B4%E6%97%B6%E3%80%8B-%E8%BA%AB%E5%9C%A8%E5%9B%9A%E7%AC%BC%EF%BC%8C%E5%BF%83%E5%8D%B4%E8%87%AA%E7%94%B1/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>人文主义</tag>
      </tags>
  </entry>
  <entry>
    <title>读孟德斯鸠《论法的精神》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%AD%9F%E5%BE%B7%E6%96%AF%E9%B8%A0%E3%80%8A%E8%AE%BA%E6%B3%95%E7%9A%84%E7%B2%BE%E7%A5%9E%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读卢梭《社会契约论》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%8D%A2%E6%A2%AD%E3%80%8A%E7%A4%BE%E4%BC%9A%E5%A5%91%E7%BA%A6%E8%AE%BA%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读尤瓦尔赫拉利《人类大历史》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E3%80%8A%E4%BA%BA%E7%B1%BB%E5%A4%A7%E5%8E%86%E5%8F%B2%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读尤瓦尔赫拉利《21世纪的21堂课》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E3%80%8A21%E4%B8%96%E7%BA%AA%E7%9A%8421%E5%A0%82%E8%AF%BE%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读尤瓦尔赫拉利《人类大命运》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E3%80%8A%E4%BA%BA%E7%B1%BB%E5%A4%A7%E5%91%BD%E8%BF%90%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读尤瓦尔赫拉利《连接》</title>
    <url>/2025/04/30/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E3%80%8A%E8%BF%9E%E6%8E%A5%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读约翰洛克《政府论》</title>
    <url>/2025/04/30/%E8%AF%BB%E7%BA%A6%E7%BF%B0%E6%B4%9B%E5%85%8B%E3%80%8A%E6%94%BF%E5%BA%9C%E8%AE%BA%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读赫尔曼黑塞《在轮下》</title>
    <url>/2025/04/30/%E8%AF%BB%E8%B5%AB%E5%B0%94%E6%9B%BC%E9%BB%91%E5%A1%9E%E3%80%8A%E5%9C%A8%E8%BD%AE%E4%B8%8B%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读赫尔曼黑塞《悉达多》</title>
    <url>/2025/04/30/%E8%AF%BB%E8%B5%AB%E5%B0%94%E6%9B%BC%E9%BB%91%E5%A1%9E%E3%80%8A%E6%82%89%E8%BE%BE%E5%A4%9A%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读赫尔曼黑塞《荒原狼》</title>
    <url>/2025/04/30/%E8%AF%BB%E8%B5%AB%E5%B0%94%E6%9B%BC%E9%BB%91%E5%A1%9E%E3%80%8A%E8%8D%92%E5%8E%9F%E7%8B%BC%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读亚当斯密《国富论》-01</title>
    <url>/2025/05/12/%E8%AF%BB%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E3%80%8A%E5%9B%BD%E5%AF%8C%E8%AE%BA%E3%80%8B-01/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读亚当斯密《国富论》-03</title>
    <url>/2025/05/12/%E8%AF%BB%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E3%80%8A%E5%9B%BD%E5%AF%8C%E8%AE%BA%E3%80%8B-03/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>读亚当斯密《国富论》 04</title>
    <url>/2025/05/12/%E8%AF%BB%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E3%80%8A%E5%9B%BD%E5%AF%8C%E8%AE%BA%E3%80%8B-04/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>读亚当斯密《国富论》-02</title>
    <url>/2025/05/12/%E8%AF%BB%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E3%80%8A%E5%9B%BD%E5%AF%8C%E8%AE%BA%E3%80%8B-02/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>对《制度基因》的一些思考</title>
    <url>/2025/07/07/%E5%AF%B9%E3%80%8A%E5%88%B6%E5%BA%A6%E5%9F%BA%E5%9B%A0%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
