<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 泛型编程</title>
    <url>/2024/12/19/C-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>这是一篇关于c++泛型编程的文章</p>
<span id="more"></span>
<p>Test</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 基本数据类型</title>
    <url>/2024/12/19/Rust-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Rust-基本数据类型概述"><a href="#Rust-基本数据类型概述" class="headerlink" title="Rust 基本数据类型概述"></a>Rust 基本数据类型概述</h1><p>Rust 每个值都有确切的数据类型, 总的来说可以分为两类: 借本类型和复合类型。基本类型意味着它们往往是一个最小化原子类型，无法结构为其它类型。</p>
<span id="more"></span>
<p>一般来说Rust包含以下基本类型:</p>
<ul>
<li>数值类型: 有符号整数(<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、无符号整数(<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>)</li>
<li>字符串: 字符串字面量和字符串切片 <code>&amp;str</code></li>
<li>布尔类型: <code>true</code> 和 <code>false</code></li>
<li>字符类型: 表示单个Unicode字符，存储为四个字节</li>
<li>单元类型: 即<code>()</code>, 其唯一的值也是()</li>
</ul>
<h1 id="类型推导与标注"><a href="#类型推导与标注" class="headerlink" title="类型推导与标注"></a>类型推导与标注</h1><p>与Python、JavaScript等动态语言不同，Rust是一门静态类型语言，也就是编译器必须再编译期知道所有变量的类型，但这不意味着你需要为每个变量指定类型，因为<strong>Rust编译器可以根据变量值和上下文的使用方式来自动推导出变量的类型</strong>，但在某些情况下，它无法推导出变量类型，需要手动去给与一个类型标注。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">except</span>(<span class="string">&quot;Not a number!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上述代码编译器无法推导出想要的类型，编译器给出如下报错:<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[Running] cargo run -q --release <span class="string">&quot;i:\SourceCode\Rust\data_deep\src\main.rs&quot;</span></span><br><span class="line">error[E0284]: <span class="keyword">type</span> <span class="title class_">annotations</span> needed</span><br><span class="line"> -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">2</span>:<span class="number">9</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     <span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;not a number&quot;</span>);</span><br><span class="line">  |         ^^^^^        ----- <span class="keyword">type</span> <span class="title class_">must</span> be known at this point</span><br><span class="line">  |</span><br><span class="line">  = note: cannot satisfy `&lt;_ <span class="keyword">as</span> FromStr&gt;::<span class="literal">Err</span> == _`</span><br><span class="line">help: consider giving `guess` an explicit <span class="keyword">type</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     <span class="keyword">let</span> <span class="variable">guess</span>: <span class="comment">/* Type */</span> = <span class="string">&quot;32&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;not a number&quot;</span>);</span><br><span class="line">  |              ++++++++++++</span><br><span class="line"></span><br><span class="line">For more information about this error, <span class="keyword">try</span> `rustc --explain E0284`.</span><br><span class="line">error: could not compile `data_deep` (bin <span class="string">&quot;data_deep&quot;</span>) due to <span class="number">1</span> previous error</span><br><span class="line"></span><br><span class="line">[Done] exited with code=<span class="number">101</span> <span class="keyword">in</span> <span class="number">0.605</span> seconds</span><br></pre></td></tr></table></figure></p>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h3 id="有理数和复数"><a href="#有理数和复数" class="headerlink" title="有理数和复数"></a>有理数和复数</h3>]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 所有权机制</title>
    <url>/2024/12/19/Rust-%E6%89%80%E6%9C%89%E6%9D%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>通过这篇博客深刻理解Rust的所有权机制</p>
<span id="more"></span>]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust-生命周期</title>
    <url>/2024/12/19/Rust-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>通过这篇博客深刻理解Rust的生命周期</p>
<!--mode-->]]></content>
  </entry>
</search>
